Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Lambda
        Parameters:
          - LambdaCloudWatchLogsName
          - LambdaIAMRoleName
          - LambdaIAMPolicyName
          - LambdaName
          - LambdaLayerArn
      - Label:
          default: EventBridge
        Parameters:
          - EventBridgeIAMRoleName
          - EventBridgeIAMPolicyName
          - EventBridgeScheduleName
          - ScheduleStartTime
          - ScheduleTimezone


Parameters:
  LambdaCloudWatchLogsName:
    Type: String
    Default: "EnableCostAllocationTags-Lambda-Logs"
  LambdaIAMRoleName:
    Type: String
    Default: "EnableCostAllocationTags-Lambda-Role"
  LambdaIAMPolicyName:
    Type: String
    Default: "EnableCostAllocationTags-Lambda-Policy"
  LambdaName:
    Type: String
    Default: "EnableCostAllocationTags-Lambda"
  LambdaLayerArn:
    Type: String
    Default: "arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-boto3:6"

  EventBridgeIAMRoleName:
    Type: String
    Default: "EnableCostAllocationTags-EventBridge-Role"
  EventBridgeIAMPolicyName:
    Type: String
    Default: "EnableCostAllocationTags-EventBridge-Policy"
  EventBridgeScheduleName:
    Type: String
    Default: "EnableCostAllocationTags-Schedule"
  # The backfill for cost allocation tags can only be executed once every 24 hours
  ScheduleStartTime:
    Type: String
    Default: "rate(2 days)"
  ScheduleTimezone:
    Type: String
    Default: "Asia/Tokyo"


Resources: 
  LambdaCloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LambdaCloudWatchLogsName
      RetentionInDays: 1
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Ref LambdaIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ce:*"
                  - "logs:*"
                Resource:
                  - "*"
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: "python3.12"
      Timeout: 900
      LoggingConfig:
        LogGroup: !Ref LambdaCloudWatchLogs
      Layers: 
        - !Ref LambdaLayerArn
      Code:
        ZipFile: |
          from datetime import datetime, timedelta
          import time
          import boto3
          ce_client = boto3.client("ce")
          def lambda_handler(event, context):
              try:
                  # List inactive tags
                  tag_list = []
                  response = ce_client.list_cost_allocation_tags(
                      Status="Inactive",
                      MaxResults=10,
                  )
                  tag_list.extend([tag["TagKey"] for tag in response["CostAllocationTags"]])
                  while "NextToken" in response:
                      response = ce_client.list_cost_allocation_tags(
                          Status="Inactive",
                          MaxResults=10,
                          NextToken=response["NextToken"],
                      )
                      tag_list.extend([tag["TagKey"] for tag in response["CostAllocationTags"]])
                  print(f"The following tags are inactive: {tag_list}")
                  print(f"Activate 【{len(tag_list)}】tags as cost allocation tags.")
                  # Activate tags as cost allocation tags
                  if len(tag_list) > 0:
                      for tag in tag_list:
                          response = ce_client.update_cost_allocation_tags_status(
                              CostAllocationTagsStatus=[
                                  {
                                      "TagKey": tag,
                                      "Status": "Active",
                                  },
                              ]
                          )
                          # Caution LimitExceededException
                          time.sleep(1)
                      print(f"Cost allocation tag activation processing completed.")
                  # Start Backfill
                  # The version of boto3 must be 1.34.71 or higher
                  today = datetime.now()
                  one_year_ago = (today.replace(day=1) - timedelta(days=365)).replace(day=1)
                  one_year_ago = one_year_ago.strftime("%Y-%m-%dT00:00:00Z")
                  print(f"Start backfill from {one_year_ago}")
                  response = ce_client.start_cost_allocation_tag_backfill(
                      BackfillFrom=one_year_ago,
                  )
              except Exception as e:
                  print(f"An error has occurred: {e}")


  EventBridgeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EventBridgeIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "scheduler.amazonaws.com"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Ref EventBridgeIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt Lambda.Arn
  EventBridgeSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      FlexibleTimeWindow:
        Mode: "OFF"
      Name: !Ref EventBridgeScheduleName
      ScheduleExpression: !Ref ScheduleStartTime
      ScheduleExpressionTimezone: !Ref ScheduleTimezone
      State: "ENABLED"
      Target: 
        Arn: !GetAtt Lambda.Arn
        RoleArn: !GetAtt EventBridgeIAMRole.Arn